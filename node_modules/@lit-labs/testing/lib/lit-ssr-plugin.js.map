{"version":3,"file":"lit-ssr-plugin.js","sourceRoot":"","sources":["../src/lib/lit-ssr-plugin.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,OAAO,EAAC,MAAM,EAAC,MAAM,gBAAgB,CAAC;AACtC,OAAO,KAAK,OAAO,MAAM,MAAM,CAAC;AAChC,OAAO,EAAC,aAAa,EAAC,MAAM,UAAU,CAAC;AACvC,OAAO,EAAC,mBAAmB,EAAC,MAAM,gBAAgB,CAAC;AAUnD,MAAM,UAAU,YAAY;IAC1B,OAAO;QACL,IAAI,EAAE,gBAAgB;QACtB,KAAK,CAAC,cAAc,CAAC,EAAC,OAAO,EAAE,OAAO,EAAC;YACrC,IAAI,OAAO,KAAK,mBAAmB,EAAE,CAAC;gBACpC,OAAO,SAAS,CAAC;YACnB,CAAC;YAED,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,MAAM,IAAI,KAAK,CAAC,uBAAuB,mBAAmB,UAAU,CAAC,CAAC;YACxE,CAAC;YAED,MAAM,EAAC,QAAQ,EAAE,OAAO,EAAC,GAAG,OAAO,CAAC;YACpC,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CACjC,CAAC,MAAM,EAAE,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CACpE,CAAC;YAEF,IAAI,OAAgC,CAAC;YACrC,IAAI,MAAiC,CAAC;YACtC,MAAM,OAAO,GAAG,IAAI,OAAO,CAAS,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBAC/C,OAAO,GAAG,GAAG,CAAC;gBACd,MAAM,GAAG,GAAG,CAAC;YACf,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;gBACjE,UAAU,EAAE,EAAC,QAAQ,EAAE,OAAO,EAAE,eAAe,EAAC;aACjD,CAAC,CAAC;YAEH,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;gBACzB,MAAM,CAAC,GAAG,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,EAAE;gBAC/B,OAAO,CAAC,OAAO,CAAC,CAAC;YACnB,CAAC,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC;QACjB,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Worker} from 'worker_threads';\nimport * as pathlib from 'path';\nimport {pathToFileURL} from 'node:url';\nimport {litSsrPluginCommand} from './constants.js';\n\nimport type {TemplateResult} from 'lit';\nimport type {TestRunnerPlugin} from '@web/test-runner';\n\nexport interface Payload {\n  template: TemplateResult;\n  modules: string[];\n}\n\nexport function litSsrPlugin(): TestRunnerPlugin<Payload> {\n  return {\n    name: 'lit-ssr-plugin',\n    async executeCommand({command, payload}) {\n      if (command !== litSsrPluginCommand) {\n        return undefined;\n      }\n\n      if (!payload) {\n        throw new Error(`Missing payload for ${litSsrPluginCommand} command`);\n      }\n\n      const {template, modules} = payload;\n      const resolvedModules = modules.map(\n        (module) => pathToFileURL(pathlib.join(process.cwd(), module)).href\n      );\n\n      let resolve: (value: string) => void;\n      let reject: (reason: unknown) => void;\n      const promise = new Promise<string>((res, rej) => {\n        resolve = res;\n        reject = rej;\n      });\n\n      const worker = new Worker(new URL('./worker.js', import.meta.url), {\n        workerData: {template, modules: resolvedModules},\n      });\n\n      worker.on('error', (err) => {\n        reject(err);\n      });\n\n      worker.on('message', (message) => {\n        resolve(message);\n      });\n\n      return promise;\n    },\n  };\n}\n"]}